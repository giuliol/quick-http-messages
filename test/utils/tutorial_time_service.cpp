//
// Created by Giulio Luzzati on 19/07/18.
//

#include "tutorial_time_service.h"

/* THIS is implemented by the developer ------------------------------------------------------------------------------*/
DECLARE_ROUTE_HANDLER(get_time_handler, in, out, params, ctx){
    *out = reply_back(in);
    int count = ((TimeServiceContext*)ctx)->count++;
    (*out)->headers["count"] = std::to_string(count);
    (*out)->body = in->body + "\n";
    (*out)->body += "I've been asked this " + std::to_string(count) + " times - " +  time_string();

    core_log_tag(ctx->node_self->tag) << "get_time_handler: request body is\n" << in->body << std::endl;

    // if there are params, dump them in the body
    if(json_has_field(params["get_time"], "params")) (*out)->body += " " + params["get_time"]["params"].dump();
    __as_response(*out)->status = HTTP_STATUS_OK;
    return CORE_OK;
}

DECLARE_ROUTE_HANDLER(ping_handler, in, out, params, ctx){
    *out = reply_back(in);
    __as_response(*out)->status = HTTP_STATUS_OK;
    return CORE_OK;
}

/*--------------------------------------------------------------------------------------------------------------------*/

/* THIS will be autogenerated ----------------------------------------------------------------------------------------*/
Status TimeService::init() {
    context = std::make_shared<TimeServiceContext>(TimeServiceContext());
    context->router.add_route("/api/v1/get_time", &get_time_handler);
    context->router.add_route("/api/v1/ping", &ping_handler);
    return Messenger::init();
}

Status TimeService::finalize() {
    return Messenger::finalize();
}
/*--------------------------------------------------------------------------------------------------------------------*/
